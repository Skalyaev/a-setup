#!/bin/bash
PATH='/bin:/sbin:/usr/bin:/usr/sbin'

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
GRAY='\033[0;37m'
NC='\033[0m'

USAGE="${GRAY}===================${NC}usage
${YELLOW}$0 ${BLUE}<path> ${GREEN}[options]${NC}

Navigate from the specified path.
Push all changes to the remote repository.
Read .add files to add specific files instead of *.
Read .msg files to change default commit message.

[options]:
${GREEN}-e, --exclude DIR[S]${NC}
* Exclude specified directories from the commit.
${GREEN}-a, --add STRING[S]${NC}
* Change default files to add.
${GREEN}-m, --message STRING${NC}
* Change default commit message.
${GREEN}--rm-add [DIR[S]]${NC}
* Remove .add files from all/specified directories.
${GREEN}--rm-msg [DIR[S]]${NC}
* Remove .msg files from all/specified directories.
${GREEN}-s, --silent${NC}
* Run in silent mode.
"

ft_echo() {
    if [ -z "$SILENT" ]; then
        echo -ne "$@"
    fi
}
#
#
#================================== PARSE
if [ "$#" -lt 1 ]; then
    echo -e "$USAGE"
    exit 1
fi

ROOT="$1"
EXCLUDE=()

TO_ADD=()
MESSAGE=''

RM_ADD=()
RM_MSG=()
shift

while [ "$#" -gt 0 ]; do
    case "$1" in
        -e|--exclude)
            shift
            while [ "$#" -gt 0 ]; do
                if [ "${1:0:1}" = '-' ]; then
                    break
                fi
                EXCLUDE=("${EXCLUDE[@]}" "$1")
                shift
            done
            if [ "${#EXCLUDE[@]}" -eq 0 ]; then
                ft_echo "[$RED ERROR $NC] Missing argument for ${GREEN}--exclude${NC}\n"
                exit 1
            fi
            ;;
        -a|--add)
            shift
            while [ "$#" -gt 0 ]; do
                if [ "${1:0:1}" = '-' ]; then
                    break
                fi
                TO_ADD=("${TO_ADD[@]}" "$1")
                shift
            done
            if [ "${#TO_ADD[@]}" -eq 0 ]; then
                ft_echo "[$RED ERROR $NC] Missing argument for ${GREEN}--add${NC}\n"
                exit 1
            fi
            ;;
        -m|--message)
            shift
            if [ "$#" -eq 0 ]; then
                ft_echo "[$RED ERROR $NC] Missing argument for ${GREEN}--message${NC}\n"
                exit 1
            fi
            MESSAGE="$1"
            ;;
        --rm-add)
            shift
            while [ "$#" -gt 0 ]; do
                if [ "${1:0:1}" = '-' ]; then
                    break
                fi
                RM_ADD=("${RM_ADD[@]}" "$1")
                shift
            done
            if [ "${#RM_ADD[@]}" -eq 0 ]; then
                RM_ADD=('*')
            fi
            ;;
        --rm-msg)
            shift
            while [ "$#" -gt 0 ]; do
                if [ "${1:0:1}" = '-' ]; then
                    break
                fi
                RM_MSG=("${RM_MSG[@]}" "$1")
                shift
            done
            if [ -z "$RM_MSG" ]; then
                RM_MSG=('*')
            fi
            ;;
        -s|--silent)
            shift
            SILENT=1
            ;;
        *)
            ft_echo "[$RED ERROR $NC] Unknown option: $1\n"
            exit 1
            ;;
    esac
done

if [ "${#TO_ADD[@]}" -eq 0 ]; then
    TO_ADD=('*')
fi
if [ -z "$MESSAGE" ]; then
    MESSAGE='update'
fi
#
#
#================================== RUN
if ! cd "$ROOT"; then
    ft_echo "[$RED ERROR $NC] Failed to 'cd $ROOT'\n"
    exit 1
fi

if [ "${#EXCLUDE[@]}" -gt 0 ]; then
    for target in "${EXCLUDE[@]}"; do
        excluded=$(find . -type d -name "$target")
        if [ -z "$excluded" ]; then
            ft_echo "[$RED ERROR $NC] $target not found from $ROOT\n"
            exit 1
        elif [ -z $(find "$excluded" -type d -name '.git') ]; then
            ft_echo "[$RED ERROR $NC] $target is not a git repository\n"
            exit 1
        fi
    done
fi

do_it() {
    local cwd=$(pwd)
    local targets=($(find "$cwd" -mindepth 1 -maxdepth 1 -type d))
    if ! echo "${targets[@]}" | grep -q "$cwd/.git"; then
        for target in "${targets[@]}"; do
            if printf "%s\n" "${EXCLUDE[@]}" | grep -q "^$(basename "$target")$"; then
                continue
            elif ! cd "$target"; then
                ft_echo "[$YELLOW WARN $NC] Failed to 'cd $target'\n"
                continue
            fi
            do_it
        done
    else
        local state=$(git status -s)
        if [ -z "$state" ]; then
            ft_echo "$cwd [$GREEN OK $NC]\n"
            return
        fi
        if echo "${targets[@]}" | grep -q "$cwd/.add"; then
            TO_ADD=$(cat '.add')
            if [ "${#RM_ADD[@]}" -gt 0 ]; then
                rm_it "${RM_ADD[@]}" "$cwd/.add"
            fi
        fi
        if echo "${targets[@]}" | grep -q "$cwd/.msg"; then
            MESSAGE=$(cat '.msg')
            if [ "${#RM_MSG[@]}" -gt 0 ]; then
                rm_it "${RM_MSG[@]}" "$cwd/.msg"
            fi
        fi
        for target in "${TO_ADD[@]}"; do
            git add "$target" &>'/dev/null'
            case "$?" in
                0) ;;
                1) ;;
                128)
                    ft_echo "[$YELLOW WARN $NC] $target not found in $cwd\n"
                    return
                    ;;
                *)
                    ft_echo "[$YELLOW WARN $NC] Non-zero returned from 'git add $target'\n"
                    return
                    ;;
            esac
        done
        ft_echo "Pushing $cwd..."
        if ! git commit -m "$MESSAGE" &>'/dev/null'; then
            ft_echo "[$RED KO $NC]\n"
            ft_echo "Non-zero returned from 'git commit -m \"$MESSAGE\"'\n"
            return
        fi
        if ! git push &>'/dev/null'; then
            ft_echo "[$RED KO $NC]\n"
            ft_echo "Non-zero returned from 'git push'\n"
            return
        fi
        ft_echo "[$GREEN OK $NC]\n"
        if [ ! -z $(git status -s) ]; then
            ft_echo "[$YELLOW WARN $NC] Uncommitted changes in $cwd\n"
        fi
    fi
}

rm_it() {
    local targets=("${@:1:$#-1}")
    local file="${@: -1}"
    if [ "${#targets[@]}" -eq 0 ]; then
        return
    fi
    if [ "${#targets[@]}" -eq 1 -a "${targets[0]}" = '*' ]; then
        rm "$file" &>'/dev/null'
    else
        local dir=$(basename $(dirname "$file"))
        for target in "${targets[@]}"; do
            if [ "$target" = "$dir" ]; then
                rm "$file" &>'/dev/null'
                return
            fi
        done
    fi
}

ft_echo "$GRAY===================from $ROOT$NC\n"
do_it
ft_echo "$GRAY===================done$NC\n"
