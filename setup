#!/bin/bash
PATH='/bin:/sbin:/usr/bin:/usr/sbin'

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
GRAY='\033[0;37m'
NC='\033[0m'

USAGE="${GRAY}===================${NC}usage
${YELLOW}setup ${BLUE}COMMAND ${GREEN}[options]${NC}

COMMAND:
    ${BLUE}install${NC}:
    - From a resource directory.
    - Install or update targets specified in *.list files.
    - Swap targets specified in .swap files.
    ${BLUE}restore${NC}:
    - From a backup directory.
    - Perform backup using diff file.

[options]:
    ${GREEN}-u, --user USER${NC}
    Setup for the specified user's home directory.
    ${GREEN}-p, --path PATH${NC}
    Specify a path to the resource or backup directory.
    Default is ~/.local/share/setup/(resource|backup)
    ${GREEN}-e, --exclude DIR[S]${NC}
    When ${BLUE}install${NC}, exclude the specified directories.
    ${GREEN}-s, --silent${NC}
    Run in silent mode.
    ${GREEN}-n, --ninja${NC}
    When ${BLUE}install${NC}, do not read *.list files.
    ${GREEN}--no-apt${NC}
    When ${BLUE}install${NC}, do not read apt.list files.
    ${GREEN}--no-web${NC}
    When ${BLUE}install${NC}, do not read web.list files.
    ${GREEN}--no-local${NC}
    When ${BLUE}install${NC}, do not read .swap files.
    ${GREEN}--no-backup${NC}
    When ${BLUE}install${NC}, do not create backup directory.
"

ft_echo() {
    if [ -z "$SILENT" ]; then
        echo -ne "$@"
    fi
}
#
#
#================================== PARSE
if [ "$#" -lt 1 ]; then
    echo -e "$USAGE"
    exit 1
fi

COMMAND="$1"
if [ "$COMMAND" != 'install' -a "$COMMAND" != 'restore' ]; then
    echo -e "[$RED ERROR $NC] Unknown command: ${GREEN}$1${NC}"
    exit 1
fi
shift

while [ "$#" -gt 0 ]; do
    case "$1" in
    '-u' | '--user')
        shift
        if [ "$#" -eq 0 ]; then
            echo -e "[$RED ERROR $NC] Missing argument for ${GREEN}--user${NC}."
            exit 1
        fi
        USER="$1"
        if ! getent passwd "$USER" >/dev/null 2>&1; then
            echo -e "[$RED ERROR $NC] Can not set home for $USER."
            exit 1
        fi
        HOME="$(getent passwd "$USER" | cut -d: -f6)"
        if [ ! -e "$HOME" ]; then
            echo -e "[$RED ERROR $NC] Can not set home for $USER."
            exit 1
        fi
        shift
        ;;
    '-p' | '--path')
        shift
        if [ "$#" -eq 0 ]; then
            echo -e "[$RED ERROR $NC] Missing argument for ${GREEN}--path${NC}."
            exit 1
        fi
        ROOT="$1"
        if [ -e "$ROOT" ]; then
            ROOT="$(realpath "$ROOT")"
        else
            echo -e "[$RED ERROR $NC] Path not found: ${GREEN}$1${NC}"
            exit 1
        fi
        shift
        ;;
    '-e' | '--exclude')
        shift
        EXCLUDES=()
        while [ "$#" -gt 0 ]; do
            if [ "${1:0:1}" = '-' ]; then
                break
            fi
            EXCLUDES+=(! -path "*/$1/*")
            shift
        done
        if [ "${#EXCLUDES[@]}" -eq 0 ]; then
            echo -e "[$RED ERROR $NC] Missing argument for ${GREEN}--exclude${NC}."
            exit 1
        fi
        ;;
    '-s' | '--silent')
        SILENT=1
        shift
        ;;
    '-n' | '--ninja')
        NO_APT=1
        NO_WEB=1
        shift
        ;;
    '--no-apt')
        NO_APT=1
        shift
        ;;
    '--no-web')
        NO_WEB=1
        shift
        ;;
    '--no-local')
        NO_SWAP=1
        shift
        ;;
    '--no-backup')
        NO_BACKUP=1
        shift
        ;;
    *)
        echo -e "[$RED ERROR $NC] Unknown option: ${GREEN}$1${NC}"
        exit 1
        ;;
    esac
done
#
#
#================================== DO_APT
ft_apt() {
    if [ ! -z "$NO_APT" ]; then
        return
    fi
    ft_echo "Updating apt..."
    if ! apt update -y >/dev/null 2>&1; then
        ft_echo "[$RED KO $NC]\n"
        ft_echo "[$YELLOW WARNING $NC] Non-zero returned from apt.\n"
        ft_echo "You may need to run this command with sudo.\n"
        ft_echo "No apt packages will be installed/updated.\n"
    else
        ft_echo "[$GREEN OK $NC]\n"
        ft_echo "${GRAY}================ READING: apt.list$NC\n"
        local pkgs="$(find "$ROOT" "${EXCLUDES[@]}" \
            -type f -name 'apt.list' |
            xargs cat |
            cut -d':' -f1)"
        while read -r pkg; do
            if ! dpkg -s "$pkg" >/dev/null 2>&1; then
                ft_echo "Installing $pkg..."
                if ! apt install -y "$pkg" >/dev/null 2>&1; then
                    ft_echo "[$RED K0 $NC]\n"
                    ft_echo "[$YELLOW WARNING $NC] Non-zero returned from apt.\n"
                    ft_echo "$pkg will not be installed.\n"
                else
                    if [ -z "$NO_BACKUP" ]; then
                        DIFF=("${DIFF[@]}" "apt:$pkg")
                    fi
                    ft_echo "[$GREEN OK $NC]\n"
                fi
            else
                ft_echo "$pkg [$GREEN OK $NC]\n"
            fi
        done <<< "$(echo "$pkgs" | uniq)"
    fi
}
#
#
#================================== DO_WEB
ft_web() {
    if [ ! -z "$NO_WEB" ]; then
        return
    fi
    ft_echo "${GRAY}================ READING: web.list$NC\n"
    local script="$(find "$ROOT" "${EXCLUDES[@]}" \
        -type f -name 'web.list' |
        xargs cat)"
    while read -r line; do
        if [ -z "$line" ]; then
            continue
        fi
        if [ -z "$to_run" -a -z "$to_skip" -a -z "$to_backup" ]; then
            if [[ "$line" == '@@@@' ]]; then
                if [ -z "$src" -o -z "$dst" ]; then
                    ft_echo "[$YELLOW WARNING $NC] A web.list file is invalid.\n"
                    ft_echo "Unmatched $line.\n"
                    ft_echo "Aborting web install.\n"
                    break
                fi
                unset target src dst installed
            elif [[ "$line" == *'@'* ]]; then
                local target="$(echo "$line" | cut -d'@' -f1 | xargs)"
                local src="$(echo "$line" | cut -d'@' -f2 | cut -d'~' -f1 | xargs)"
            elif [[ "$line" == '#### '* ]]; then
                if [ -z "$src" ]; then
                    ft_echo "[$YELLOW WARNING $NC] A web.list file is invalid.\n"
                    ft_echo "Unmatched $line.\n"
                    ft_echo "Aborting web install.\n"
                    break
                fi
                local dst="$(echo "$line" | cut -d' ' -f2 | xargs)"
                if [ -e "$dst" ]; then
                    local installed=1
                fi
            elif [[ "$line" == '$- INSTALL' ]]; then
                if [ -z "$src" -o -z "$dst" ]; then
                    ft_echo "[$YELLOW WARNING $NC] A web.list file is invalid.\n"
                    ft_echo "src and/or dst missing for an INSTALL.\n"
                    ft_echo "Aborting web install.\n"
                    break
                else
                    if [ -z "$installed" ]; then
                        ft_echo "Installing $target..."
                        if [ ! -e "$(dirname "$dst")" ]; then
                            if ! mkdir -p "$dst" >/dev/null 2>&1; then
                                ft_echo "[$RED KO $NC]\n"
                                ft_echo "[$YELLOW WARNING $NC] Can not create $dst\n"
                                ft_echo "$target will not be installed/updated.\n"
                                local to_skip=1
                                continue
                            else
                                DIFF=("${DIFF[@]}" "add:$dst")
                                chown "$USER:$USER" "$dst" >/dev/null 2>&1
                            fi
                        fi
                        local to_run=1
                    else
                        local to_skip=1
                    fi
                fi
            elif [[ "$line" == '$- UPDATE' ]]; then
                if [ -z "$src" -o -z "$dst" ]; then
                    ft_echo "[$YELLOW WARNING $NC] A web.list file is invalid.\n"
                    ft_echo "src and/or dst missing for an UPDATE.\n"
                    ft_echo "Aborting web install.\n"
                    break
                else
                    if [ -z "$installed" ]; then
                        local to_skip=1
                    else
                        local to_run=1
                        ft_echo "Updating $target..."
                    fi
                fi
            elif [[ "$line" == '$- REMOVE' ]]; then
                if [ -z "$src" -o -z "$dst" ]; then
                    ft_echo "[$YELLOW WARNING $NC] A web.list file is invalid.\n"
                    ft_echo "src and/or dst missing for a REMOVE.\n"
                    ft_echo "Aborting web install.\n"
                    break
                else
                    if [ -z "$NO_BACKUP" ]; then
                        local to_backup=1
                        DIFF=("${DIFF[@]}" "web:$dst")
                    else
                        local to_skip=1
                    fi
                fi
            fi
        elif [[ "$line" == '$---' ]]; then
            if [ ! -z "$to_backup" ]; then
                DIFF=("${DIFF[@]}" '$---')
            elif [ ! -z "$to_run" ]; then
                ft_echo "[$GREEN OK $NC]\n"
                if [ -e "$dst" ]; then
                    chown -R "$USER:$USER" "$dst" >/dev/null 2>&1
                fi
            fi
            unset to_run to_skip to_backup
        elif [ ! -z "$to_backup" ]; then
            DIFF=("${DIFF[@]}" "$line")
        elif [ ! -z "$to_run" ]; then
            if ! eval "$line" >/dev/null 2>&1; then
                unset to_run
                local to_skip=1
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$YELLOW WARNING $NC] Non-zero returned from: $line\n"
                ft_echo "$target will not be installed/updated.\n"
                ft_echo "You may need to clear that install/update manually.\n"
            fi
        fi
    done <<< "$script"
}
#
#
#================================== DO_SWAP
ft_swap() {
    if [ ! -z "$NO_SWAP" ]; then
        return
    fi
    ft_echo "${GRAY}================ READING: .swap$NC\n"
    local files="$(find "$ROOT" "${EXCLUDES[@]}" \
        -type f -name '.swap')"
    for file in $files; do
        local dir="$(dirname "$file")"

        while read -r line; do
            if [ -z "$line" ]; then
                continue
            fi
            target="$(echo "$line" | cut -d'@' -f1 | xargs)"
            src="$dir/$target"
            target="$(basename "$target")"
            dst="$(echo "$line" | cut -d'@' -f2 | xargs | sed "s:~:$HOME:g")"

            ft_echo "Setting $dst/$target..."
            if [ -z "$NO_BACKUP" ]; then
                if [ -e "$dst/$target" ]; then
                    local action='swap'
                else
                    local action='add'
                fi
            fi
            if [ ! -e "$dst" ]; then
                if ! mkdir -p "$dst" >/dev/null 2>&1; then
                    ft_echo "[$RED KO $NC]\n"
                    ft_echo "[$YELLOW WARNING $NC] Can not create $dst\n"
                    ft_echo "$dst/$target not set.\n"
                    continue
                else
                    DIFF=("${DIFF[@]}" "add:$dst")
                    chown "$USER:$USER" "$dst" >/dev/null 2>&1
                fi
            elif [ -e "$dst/$target" -a -z "$NO_BACKUP" ]; then
                if ! cp -r "$dst/$target" "$BACKUP" >/dev/null 2>&1; then
                    ft_echo "[$RED KO $NC]\n"
                    ft_echo "[$YELLOW WARNING $NC] Can not backup $dst/$target\n"
                    ft_echo "$dst/$target not set\n"
                    continue
                fi
            fi
            if ! cp -r "$src" "$dst" >/dev/null 2>&1; then
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$YELLOW WARNING $NC] Can not set $dst/$target\n"
                continue
            else
                chown -R "$USER:$USER" "$dst/$target" >/dev/null 2>&1
            fi
            if [ -z "$NO_BACKUP" ]; then
                DIFF=("${DIFF[@]}" "$action:$dst/$target")
            fi
            ft_echo "[$GREEN OK $NC]\n"
        done <"$file"
    done
}
#
#
#================================== DO_RESTORE
ft_restore() {
    if [ ! -e "$ROOT/diff" ]; then
        ft_echo "[$RED ERROR $NC] No diff file found.\n"
        ft_echo "Aborting restore.\n"
        exit 1
    fi
    ft_echo "${GRAY}================ READING: diff$NC\n"
    while read line; do
        if [ -z "$line" -o ! -z "$skip_it" ]; then
            continue
        fi
        if [ ! -z "$run_it" ]; then
            if [ -z "$dst" ]; then
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$RED ERROR $NC] Diff file corrupted.\n"
                ft_echo "Aborting restore.\n"
                exit 1
            fi
            if [ "$line" = '$---' ]; then
                unset run_it skip_it dst
                ft_echo "[$GREEN OK $NC]\n"
                continue
            fi
            if ! eval "$line" >/dev/null 2>&1; then
                unset to_run
                local to_skip=1
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$YELLOW WARNING $NC] Non-zero returned from: $line\n"
                ft_echo "$dst not removed.\n"
            fi
        fi

        local cmd="$(echo "$line" | cut -d: -f1)"
        local target="$(echo "$line" | cut -d: -f2)"
        case "$cmd" in
        'apt')
            ft_echo "Removing $target..."
            if ! apt remove -y "$target"; then
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$YELLOW WARNING $NC] Non-zero returned from apt.\n"
                ft_echo "You may need to run this command with sudo.\n"
                ft_echo "$target not removed.\n"
            else
                ft_echo "[$GREEN OK $NC]\n"
            fi
            ;;
        'web')
            ft_echo "Removing $target..."
            local dst="$target"
            local run_it=1
            ;;
        'add')
            ft_echo "Removing $target..."
            if ! rm -rf "$target"; then
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$YELLOW WARNING $NC] Can not remove $target.\n"
                ft_echo "$target not removed.\n"
            else
                ft_echo "[$GREEN OK $NC]\n"
            fi
            ;;
        'swap')
            ft_echo "Restoring $target..."
            local dir="$(dirname "$target")"
            local target="$(basename "$target")"
            if ! cp -r "$ROOT/$target" "$dir/$target" >/dev/null 2>&1; then
                ft_echo "[$RED KO $NC]\n"
                ft_echo "[$YELLOW WARNING $NC] Can not copy \
                    $ROOT/$target to $dir/$target.\n"
                ft_echo "$dir/$target not restored.\n"
            else
                ft_echo "[$GREEN OK $NC]\n"
                chown -R "$USER:$USER" "$dir/$target" >/dev/null 2>&1
            fi
            ;;
        esac
    done <"$ROOT/diff"
}
#
#
#================================== RUN
if [ "$EUID" -eq 0 -a "$USER" != 'root' ]; then
    is_sudo='(sudo) '
fi
ft_echo "${GRAY}================ Running as $is_sudo$USER$NC\n"
case "$COMMAND" in
'install')
    if [ -z "$ROOT" ]; then
        ROOT="$HOME/.local/share/setup/resource"
        if [ ! -e "$ROOT" ]; then
            ft_echo "[$RED ERROR $NC] $ROOT not found.\n"
            ft_echo "If run as sudo, please use -u to specify target user.\n"
            ft_echo "Aborting.\n"
            exit 1
        fi
    fi
    if [ -z "$NO_BACKUP" ]; then
        DIFF=()
        BACKUP="$(dirname "$ROOT")/backup/$(date +%Y%m%d%H%M%S)"
        mkdir -p "$BACKUP"
        chown -R "$USER:$USER" "$(dirname "$ROOT")/backup" \
            >/dev/null 2>&1
    fi
    ft_apt
    ft_web
    ft_swap
    if [ -z "$NO_BACKUP" ]; then
        if [ "${#DIFF[@]}" -gt 0 ]; then
            for x in "${DIFF[@]}"; do
                echo "$x" >>"$BACKUP/diff" 
            done
            chown -R "$USER:$USER" "$BACKUP" >/dev/null 2>&1
        else
            rm -r "$BACKUP"
        fi
    fi
    ;;
'restore')
    if [ -z "$ROOT" ]; then
        ROOT="$(ls -t "$HOME/.local/share/setup/backup" |
            head -n 1)"
    fi
    ft_restore
    ;;
esac
