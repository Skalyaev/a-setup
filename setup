#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin

BLUE='\033[0;34m'
GRAY='\033[0;37m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

UI_GROUP=(
    gui
    terminal
    ide
    tools
)
PENTEST_GROUP=(
    info_gathering
    web_analysis
    db_assessment
    passw_atk
    exploitation
    prives
    sniff_spoof
    wireless_atk
    vuln_analysis
    reverse
    report
)

CONFIG_FILE=~/.config/setup/config
DO_APT=1
DO_GIT=1
DO_CURL=1
DO_BACKUP=1

ft_echo() {
    if [ -z $SILENT ]; then
        echo -e "$@"
    fi
}

is_inside() {
    local tab=("${@:1:$#-1}")
    local item="${@: -1}"
    for x in "${tab[@]}"; do
        if [ "$x" = "$item" ]; then
            return 0
        fi
    done
    return 1
}

USAGE="
${GRAY}===================${NC}usage\n
${YELLOW}setup ${GREEN}COMMAND GROUP ${BLUE}[targets] [options]${NC}\n
\n
COMMAND:\n
\t  ${GREEN}install${NC}:\n
\t  - Install targets if not installed.\n
\t  - Configure targets anyway.\n
\t  ${GREEN}update${NC}\n
\t  - Update targets if installed.\n
\t  ${GREEN}restore${NC}\n
\t  - Remove targets we installed.\n
\t  - Undo the configurations we made.\n
GROUP:\n
\t  ${GREEN}all ${GRAY}| ${GREEN}ui ${GRAY}| ${GREEN}pentest${NC}\n
\n
${GRAY}===================${NC}targets\n
${GREEN}ui${NC} group:\n
\t  ${BLUE}gui${NC}\n
\t  ${BLUE}terminal${NC}\n
\t  ${BLUE}ide${NC}\n
\t  ${BLUE}tools${NC}\n
\n
${GREEN}pentest${NC} group:\n
\t  ${BLUE}info_gathering${NC}\n
\t  ${BLUE}web_analysis${NC}\n
\t  ${BLUE}db_assessment${NC}\n
\t  ${BLUE}passw_atk${NC}\n
\t  ${BLUE}exploitation${NC}\n
\t  ${BLUE}privesc${NC}\n
\t  ${BLUE}sniff_spoof${NC}\n
\t  ${BLUE}wireless_atk${NC}\n
\t  ${BLUE}vuln_analysis${NC}\n
\t  ${BLUE}reverse${NC}\n
\t  ${BLUE}report${NC}\n
\n
${GRAY}===================${NC}options\n
\t  ${BLUE}-c, --config PATH${NC}\n
\t  Use a specific config file.\n
\t  ${BLUE}-e, --exclude TARGETS${NC}\n
\t  Exclude specific ${BLUE}targets${NC}.\n
\t  ${BLUE}-s, --silent${NC}\n
\t  Run in silent mode.\n
\t  ${BLUE}-n, --ninja${NC}\n
\t  Do not install any external resources.\n
\t  ${BLUE}--no-apt${NC}\n
\t  Do not install apt packages.\n
\t  ${BLUE}--no-git${NC}\n
\t  Do not install git repositories.\n
\t  ${BLUE}--no-curl${NC}\n
\t  Do not install other external resources.\n
\t  ${BLUE}--no-backup${NC}\n
\t  Do not create backup for this ${YELLOW}install${NC}.\n
\t  Backups are used for ${YELLOW}restore${NC}.\n
\n
${GRAY}===================${NC}exemples\n
${YELLOW}setup ${GREEN}install all ${BLUE}terminal privesc report -c ~/exemple -s${NC}\n
${YELLOW}setup ${GREEN}install pentest ${BLUE}-e reverse vuln_analysis${NC}\n
${YELLOW}setup ${GREEN}install ui ${BLUE}terminal tools -n${NC}\n
${YELLOW}setup ${GREEN}update all ${BLUE}--no-apt${NC}\n
"
#
#
#================================== PARSING

#======================== ARGUMENTS
if [ $# -lt 2 ]; then
    echo -e $USAGE
    exit 1
fi

COMMAND="$1"
if [ "$COMMAND" != install \
    -a "$COMMAND" != update \
    -a "$COMMAND" != restore ]; then
    echo -e "[$RED ERROR $NC] Unknown command:$GREEN $1${NC}"
    exit 1
fi

GROUP="$2"
if [ "$GROUP" != all \
    -a "$GROUP" != ui \
    -a "$GROUP" != pentest ]; then
    echo -e "[$RED ERROR $NC] Unknown group:$GREEN $2${NC}"
    exit 1
fi

shift 2

TARGETS=()
EXCLUDES=()

find_it() {
    local found=1
    if [ $GROUP = all -o $GROUP = ui ]; then
        is_inside ${UI_GROUP[@]} "$1"
        found=$?
    fi
    if [ $found -eq 1 ] && [ $GROUP = all -o $GROUP = pentest ]; then
        is_inside ${PENTEST_GROUP[@]} "$1"
        found=$?
    fi
    return $found
}

while [ $# -gt 0 ]; do
    if [ "${1:0:1}" = - ]; then
        break
    fi
    if ! find_it "$1"; then
        echo -e "[$RED ERROR $NC] ${BLUE}$1${NC} not found in group ${GREEN}$GROUP${NC}."
        exit 1
    fi
    TARGETS+=("$1")
    shift
done
if [ ${#TARGETS[@]} -eq 0 ]; then
    if [ $GROUP = all -o $GROUP = ui ]; then
        TARGETS+=(${UI_GROUP[@]})
    fi
    if [ $GROUP = all -o $GROUP = pentest ]; then
        TARGETS+=(${PENTEST_GROUP[@]})
    fi
fi

while [ $# -gt 0 ]; do
    case "$1" in
    -c | --config)
        if [ $# -lt 2 ]; then
            echo -e [$RED ERROR $NC] Missing argument for ${BLUE}--config${NC}.
            exit 1
        fi
        CONFIG_FILE="$2"
        shift 2
        ;;
    -e | --exclude)
        shift
        while [ $# -gt 0 ]; do
            if [ "${1:0:1}" = - ]; then
                break
            fi
            if ! find_it "$1"; then
                echo -e "[$RED ERROR $NC] ${BLUE}$1${NC} not found in group ${GREEN}$GROUP${NC}."
                exit 1
            fi
            EXCLUDES+=("$1")
            shift
        done
        if [ ${#EXCLUDES[@]} -eq 0 ]; then
            echo -e [$RED ERROR $NC] Missing argument for ${BLUE}--exclude${NC}.
            exit 1
        fi
        ;;
    -s | --silent)
        SILENT=1
        shift
        ;;
    -n | --ninja)
        DO_APT=0
        DO_GIT=0
        DO_CURL=0
        shift
        ;;
    --no-apt)
        DO_APT=0
        shift
        ;;
    --no-git)
        DO_GIT=0
        shift
        ;;
    --no-curl)
        DO_CURL=0
        shift
        ;;
    --no-backup)
        DO_BACKUP=0
        shift
        ;;
    *)
        echo -e "[$RED ERROR $NC] Unknown option:$BLUE $1${NC}"
        exit 1
        ;;
    esac
done

#======================== CONFIG
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "[$RED ERROR $NC] Config file not found: $CONFIG_FILE"
    exit 1
fi

in_block=0
while IFS= read -r line; do
    if [ "${line:0:10}" = '#======== ' ]; then
        in_block=0
        for target in ${TARGETS[@]}; do
            if echo "$line" | grep -iq $target; then
                in_block=1
                break
            fi
        done
    elif [ $in_block -eq 1 ]; then
        if [ -z "$line" -o "${line:0:1}" = '#' ]; then
            continue
        fi
        case "$line" in
        'DO_I3=1') DO_I3=1 ;;
        'DO_PICOM=1') DO_PICOM=1 ;;
        'DO_LIGHTDM=1') DO_LIGHTDM=1 ;;
        'DO_USER_DIRS=1') DO_USER_DIRS=1 ;;
        'DO_BASH=1') DO_BASH=1 ;;
        'DO_XTERM=1') DO_XTERM=1 ;;
        'DO_TERMINATOR=1') DO_TERMINATOR=1 ;;
        'DO_VIM=1') DO_VIM=1 ;;
        'DO_MISCS_TOOLS=1') DO_MISCS_TOOLS=1 ;;
        'DO_LIVE_HOST_IDENTIFIERS=1') DO_LIVE_HOST_IDENTIFIERS=1 ;;
        'DO_NETWORK_SCANNERS=1') DO_NETWORK_SCANNERS=1 ;;
        'DO_DNS_ANALYSERS=1') DO_DNS_ANALYSERS=1 ;;
        'DO_SSL_ANALYSERS=1') DO_SSL_ANALYSERS=1 ;;
        'DO_SMB_ANALYSERS=1') DO_SMB_ANALYSERS=1 ;;
        'DO_OSINT_ANALYSERS=1') DO_OSINT_ANALYSERS=1 ;;
        'DO_WEB_CRAWLERS=1') DO_WEB_CRAWLERS=1 ;;
        'DO_WEB_PROXIES=1') DO_WEB_PROXIES=1 ;;
        'DO_WEB_VULN_SCANNERS=1') DO_WEB_VULN_SCANNERS=1 ;;
        'DO_CMS_IDENTIFIERS=1') DO_CMS_IDENTIFIERS=1 ;;
        'DO_WORDPRESS_ANALYSERS=1') DO_WORDPRESS_ANALYSERS=1 ;;
        'DO_MISC_DB_ASSESSMENT_TOOLS=1') DO_MISC_DB_ASSESSMENT_TOOLS=1 ;;
        'DO_ONLINE_ATK_TOOLS=1') DO_ONLINE_ATK_TOOLS=1 ;;
        'DO_OFFLINE_ATK_TOOLS=1') DO_OFFLINE_ATK_TOOLS=1 ;;
        'DO_PROFILERS=1') DO_PROFILERS=1 ;;
        'DO_MISC_EXPLOITATION_TOOLS=1') DO_MISC_EXPLOITATION_TOOLS=1 ;;
        'DO_LINUX_PRIVESC_TOOLS=1') DO_LINUX_PRIVESC_TOOLS=1 ;;
        'DO_WINDOWS_PRIVESC_TOOLS=1') DO_WINDOWS_PRIVESC_TOOLS=1 ;;
        'DO_MISC_SNIFFING_TOOLS=1') DO_MISC_SNIFFING_TOOLS=1 ;;
        'DO_MISC_SPOOFING_TOOLS=1') DO_MISC_SPOOFING_TOOLS=1 ;;
        'DO_MISC_WIRELESS_ATK_TOOLS=1') DO_MISC_WIRELESS_ATK_TOOLS=1 ;;
        'DO_BLUETHOOTH_ATK_TOOLS=1') DO_BLUETHOOTH_ATK_TOOLS=1 ;;
        'DO_STRESS_TESTERS=1') DO_STRESS_TESTERS=1 ;;
        'DO_CISCO_TESTERS=1') DO_CISCO_TESTERS=1 ;;
        'DO_VOIP_TESTERS=1') DO_VOIP_TESTERS=1 ;;
        'DO_MISC_REVERSE_TOOLS=1') DO_MISC_REVERSE_TOOLS=1 ;;
        'DO_MISC_REPORTING_TOOLS=1') DO_MISC_REPORTING_TOOLS=1 ;;
        *)
            echo -e "[$RED ERROR $NC] Unknown config input: $line"
            exit 1
            ;;
        esac
    fi
done <"$CONFIG_FILE"
#
#
#================================== UI GROUP - GUI
do_i3() {
    case $COMMAND in
    install) ;;
    update) ;;
    restore) ;;
    esac
}

do_picom() {
    case $COMMAND in
    install) ;;
    update) ;;
    restore) ;;
    esac
}

do_lightdm() {
    case $COMMAND in
    install) ;;
    update) ;;
    restore) ;;
    esac
}

do_user_dirs() {
    case $COMMAND in
    install) ;;
    update) ;;
    restore) ;;
    esac
}
#
#
#================================== UI GROUP - TERMINAL
do_bash() {
    echo bash
}

do_xterm() {
    echo xterm
}

do_terminator() {
    echo terminator
}
#
#
#================================== UI GROUP - IDE
do_vim() {
    echo vim
}

do_git() {
    echo git
}
#
#
#================================== UI GROUP - TOOLS
do_misc_tools() {
    echo misc_tools
}
#
#
#================================== PENTEST GROUP - INFO_GATHERING
do_live_host_identifiers() {
    echo live_host_identifiers
}

do_network_scanners() {
    echo network_scanners
}

do_dns_analysers() {
    echo dns_analysers
}

do_ssl_analysers() {
    echo ssl_analysers
}

do_smb_analysers() {
    echo smb_analysers
}

do_osint_analysers() {
    echo osint_analysers
}
#
#
#================================== PENTEST GROUP - WEB_ANALYSIS
do_web_crawlers() {
    echo web_crawlers
}

do_web_proxies() {
    echo web_proxies
}

do_web_vuln_scanners() {
    echo web_vuln_scanners
}

do_cms_identifiers() {
    echo cms_identifiers
}

do_wordpress_analysers() {
    echo wordpress_analysers
}
#
#
#================================== PENTEST GROUP - DB_ASSESSMENT
do_misc_db_assessment_tools() {
    echo misc_db_assessment_tools
}
#
#
#================================== PENTEST GROUP - PASSW_ATK
do_online_atk_tools() {
    echo online_atk_tools
}

do_offline_atk_tools() {
    echo offline_atk_tools
}

do_profilers() {
    echo profilers
}
#
#
#================================== PENTEST GROUP - EXPLOITATION
do_misc_exploitation_tools() {
    echo misc_exploitation_tools
}
#
#
#================================== PENTEST GROUP - PRIVESC
do_linux_privesc_tools() {
    echo linux_privesc_tools
}

do_windows_privesc_tools() {
    echo windows_privesc_tools
}
#
#
#================================== PENTEST GROUP - SNIFF_SPOOF
do_misc_sniffing_tools() {
    echo misc_sniffing_tools
}

do_misc_spoofing_tools() {
    echo misc_spoofing_tools
}
#
#
#================================== PENTEST GROUP - WIRELESS_ATK
do_misc_wireless_atk_tools() {
    echo misc_wireless_atk_tools
}
#
#
#================================== PENTEST GROUP - VULN_ANALYSIS
do_stress_testers() {
    echo stress_testers
}

do_cisco_testers() {
    echo cisco_testers
}

do_voip_testers() {
    echo voip_testers
}
#
#
#================================== PENTEST GROUP - REVERSE
do_misc_reverse_tools() {
    echo misc_reverse_tools
}
#
#
#================================== PENTEST GROUP - REPORT
do_misc_reporting_tools() {
    echo misc_reporting_tools
}
#
#
#================================== RUN
BACKUP_DIR=$(dirname "$CONFIG_FILE")/backups

case $COMMAND in
install)
    BACKUP_DIR="$BACKUP_DIR"/$(date +%Y%m%d_%H%M%S)
    mkdir -p "$BACKUP_DIR"
    DIFF=()
    ft_echo "${GRAY}===============${NC}Installing:"
    ;;

update)
    ft_echo "${GRAY}===============${NC}Updating:"
    ;;

restore)
    readarray -t BACKUPS < <(
        find "$BACKUP_DIR" -mindepth 1 -maxdepth 1 -type d
    )
    if [ "${#BACKUPS[@]}" -eq 0 ]; then
        ft_echo "[$RED ERROR $NC] No backup found in $BACKUP_DIR"
        exit 1
    fi
    if [ "${#BACKUPS[@]}" -gt 1 ]; then
        echo -e "[$YELLOW WARNING $NC] Multiple backups found in $BACKUP_DIR:"
        for x in "${!BACKUPS[@]}"; do
            echo -e "[$BLUE $x $NC] ${BACKUPS[$x]}"
        done
        read -p "Select a backup to restore: " input
        if [[ ! "$input" =~ ^[0-9]+$ ]] ||
            [ $input -ge "${#BACKUPS[@]}" ]; then
            ft_echo "[$RED ERROR $NC] Invalid input"
            exit 1
        fi
        BACKUP_DIR="${BACKUPS[$input]}"
    else
        BACKUP_DIR="${BACKUPS[0]}"
    fi
    echo $BACKUP_DIR
    ft_echo "${GRAY}===============${NC}Restoring:"
    ;;
esac

ft_echo "${BLUE}${TARGETS[@]}${NC}" | tr " " "\n"
ft_echo "${GRAY}================>${NC}"

#======== UI GROUP - GUI
if is_inside ${TARGETS[@]} gui &&
    ! is_inside ${EXCLUDES[@]} gui; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}gui${NC}..."

    if [ ! -z $DO_I3 ]; then
        ft_echo "on i3..."
        do_i3
        ft_echo "i3 [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_PICOM ]; then
        ft_echo "on picom..."
        do_picom
        ft_echo "picom [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_LIGHTDM ]; then
        ft_echo "on lightdm..."
        do_lightdm
        ft_echo "lightdm [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_USER_DIRS ]; then
        ft_echo "on user dirs..."
        do_user_dirs
        ft_echo "user dirs [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}gui${NC} [$GREEN OK $NC]"
fi

#======== UI GROUP - TERMINAL
if is_inside ${TARGETS[@]} terminal &&
    ! is_inside ${EXCLUDES[@]} terminal; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}terminal${NC}..."

    if [ ! -z $DO_BASH ]; then
        ft_echo "on bash..."
        do_bash
        ft_echo "bash [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_XTERM ]; then
        ft_echo "on xterm..."
        do_xterm
        ft_echo "xterm [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_TERMINATOR ]; then
        ft_echo "on terminator..."
        do_terminator
        ft_echo "terminator [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}terminal${NC} [$GREEN OK $NC]"
fi

#======== UI GROUP - IDE
if is_inside ${TARGETS[@]} ide &&
    ! is_inside ${EXCLUDES[@]} ide; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}ide${NC}..."

    if [ ! -z $DO_VIM ]; then
        ft_echo "on vim..."
        do_vim
        ft_echo "vim [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}ide${NC} [$GREEN OK $NC]"
fi

#======== UI GROUP - TOOLS
if is_inside ${TARGETS[@]} tools &&
    ! is_inside ${EXCLUDES[@]} tools; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}tools${NC}..."

    if [ ! -z $DO_MISCS_TOOLS ]; then
        ft_echo "on miscs tools..."
        do_misc_tools
        ft_echo "miscs tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}tools${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - INFO_GATHERING
if is_inside ${TARGETS[@]} info_gathering &&
    ! is_inside ${EXCLUDES[@]} info_gathering; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}info_gathering${NC}..."

    if [ ! -z $DO_LIVE_HOST_IDENTIFIERS ]; then
        ft_echo "on live host identifiers..."
        do_live_host_identifiers
        ft_echo "live host identifiers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_NETWORK_SCANNERS ]; then
        ft_echo "on network scanners..."
        do_network_scanners
        ft_echo "network scanners [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_DNS_ANALYSERS ]; then
        ft_echo "on dns analysers..."
        do_dns_analysers
        ft_echo "dns analysers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_SSL_ANALYSERS ]; then
        ft_echo "on ssl analysers..."
        do_ssl_analysers
        ft_echo "ssl analysers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_SMB_ANALYSERS ]; then
        ft_echo "on smb analysers..."
        do_smb_analysers
        ft_echo "smb analysers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_OSINT_ANALYSERS ]; then
        ft_echo "on osint analysers..."
        do_osint_analysers
        ft_echo "osint analysers [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}info_gathering${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - WEB_ANALYSIS
if is_inside ${TARGETS[@]} web_analysis &&
    ! is_inside ${EXCLUDES[@]} web_analysis; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}web_analysis${NC}..."

    if [ ! -z $DO_WEB_CRAWLERS ]; then
        ft_echo "on web crawlers..."
        do_web_crawlers
        ft_echo "web crawlers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_WEB_PROXIES ]; then
        ft_echo "on web proxies..."
        do_web_proxies
        ft_echo "web proxies [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_WEB_VULN_SCANNERS ]; then
        ft_echo "on web vuln scanners..."
        do_web_vuln_scanners
        ft_echo "web vuln scanners [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_CMS_IDENTIFIERS ]; then
        ft_echo "on cms identifiers..."
        do_cms_identifiers
        ft_echo "cms identifiers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_WORDPRESS_ANALYSERS ]; then
        ft_echo "on wordpress analysers..."
        do_wordpress_analysers
        ft_echo "wordpress analysers [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}web_analysis${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - DB_ASSESSMENT
if is_inside ${TARGETS[@]} db_assessment &&
    ! is_inside ${EXCLUDES[@]} db_assessment; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}db_assessment${NC}..."

    if [ ! -z $DO_MISC_DB_ASSESSMENT_TOOLS ]; then
        ft_echo "on misc db assessment tools..."
        do_misc_db_assessment_tools
        ft_echo "misc db assessment tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}db_assessment${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - PASSW_ATK
if is_inside ${TARGETS[@]} passw_atk &&
    ! is_inside ${EXCLUDES[@]} passw_atk; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}passw_atk${NC}..."

    if [ ! -z $DO_ONLINE_ATK_TOOLS ]; then
        ft_echo "on online atk tools..."
        do_online_atk_tools
        ft_echo "online atk tools [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_OFFLINE_ATK_TOOLS ]; then
        ft_echo "on offline atk tools..."
        do_offline_atk_tools
        ft_echo "offline atk tools [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_PROFILERS ]; then
        ft_echo "on profilers..."
        do_profilers
        ft_echo "profilers [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}passw_atk${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - EXPLOITATION
if is_inside ${TARGETS[@]} exploitation &&
    ! is_inside ${EXCLUDES[@]} exploitation; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}exploitation${NC}..."

    if [ ! -z $DO_MISC_EXPLOITATION_TOOLS ]; then
        ft_echo "on misc exploitation tools..."
        do_misc_exploitation_tools
        ft_echo "misc exploitation tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}exploitation${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - PRIVESC
if is_inside ${TARGETS[@]} privesc &&
    ! is_inside ${EXCLUDES[@]} privesc; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}privesc${NC}..."

    if [ ! -z $DO_LINUX_PRIVESC_TOOLS ]; then
        ft_echo "on linux privesc tools..."
        do_linux_privesc_tools
        ft_echo "linux privesc tools [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_WINDOWS_PRIVESC_TOOLS ]; then
        ft_echo "on windows privesc tools..."
        do_windows_privesc_tools
        ft_echo "windows privesc tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}privesc${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - SNIFF_SPOOF
if is_inside ${TARGETS[@]} sniff_spoof &&
    ! is_inside ${EXCLUDES[@]} sniff_spoof; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}sniff_spoof${NC}..."

    if [ ! -z $DO_MISC_SNIFFING_TOOLS ]; then
        ft_echo "on misc sniffing tools..."
        do_misc_sniffing_tools
        ft_echo "misc sniffing tools [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_MISC_SPOOFING_TOOLS ]; then
        ft_echo "on misc spoofing tools..."
        do_misc_spoofing_tools
        ft_echo "misc spoofing tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}sniff_spoof${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - WIRELESS_ATK
if is_inside ${TARGETS[@]} wireless_atk &&
    ! is_inside ${EXCLUDES[@]} wireless_atk; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}wireless_atk${NC}..."

    if [ ! -z $DO_MISC_WIRELESS_ATK_TOOLS ]; then
        ft_echo "on misc wireless atk tools..."
        do_misc_wireless_atk_tools
        ft_echo "misc wireless atk tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}wireless_atk${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - VULN_ANALYSIS
if is_inside ${TARGETS[@]} vuln_analysis &&
    ! is_inside ${EXCLUDES[@]} vuln_analysis; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}vuln_analysis${NC}..."

    if [ ! -z $DO_STRESS_TESTERS ]; then
        ft_echo "on stress testers..."
        do_stress_testers
        ft_echo "stress testers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_CISCO_TESTERS ]; then
        ft_echo "on cisco testers..."
        do_cisco_testers
        ft_echo "cisco testers [$GREEN OK $NC]"
    fi
    if [ ! -z $DO_VOIP_TESTERS ]; then
        ft_echo "on voip testers..."
        do_voip_testers
        ft_echo "voip testers [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}vuln_analysis${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - REVERSE
if is_inside ${TARGETS[@]} reverse &&
    ! is_inside ${EXCLUDES[@]} reverse; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}reverse${NC}..."

    if [ ! -z $DO_MISC_REVERSE_TOOLS ]; then
        ft_echo "on misc reverse tools..."
        do_misc_reverse_tools
        ft_echo "misc reverse tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}reverse${NC} [$GREEN OK $NC]"
fi

#======== PENTEST GROUP - REPORT
if is_inside ${TARGETS[@]} report &&
    ! is_inside ${EXCLUDES[@]} report; then
    ft_echo "\n${GRAY}====${NC}Target: ${BLUE}report${NC}..."

    if [ ! -z $DO_MISC_REPORTING_TOOLS ]; then
        ft_echo "on misc reporting tools..."
        do_misc_reporting_tools
        ft_echo "misc reporting tools [$GREEN OK $NC]"
    fi

    ft_echo "${GRAY}====${NC}Target: ${BLUE}report${NC} [$GREEN OK $NC]"
fi

#======== DONE
if [ $COMMAND = install ]; then
    if [ ${#DIFF[@]} -gt 0 ]; then
        echo ${DIFF[@]} | tr " " "\n" >"$BACKUP_DIR/diff.txt"
    else
        rm -rf "$BACKUP_DIR"
    fi
fi

ft_echo "${GRAY}================[$GREEN DONE $NC]"
